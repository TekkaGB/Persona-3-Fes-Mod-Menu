import ( "ModMenu.msg" );

// Open menu
void ModMenuDisplay()
{
	OPEN_MSG_WIN();
	
	while (true)
	{
		MSG( Mod );
		SEL_CHK_PAD(6,20);
		SEL_CHK_PAD(7,20);
		int select = SEL( Mod_Menu );
		switch (select)
		{
			case 0:
				if (Call_Menu_Display())
					return;
				else
					break;
			case 1:
				if (Flag_Menu_Display())
					return;
				else
					break;
			case 2:
				if (Facilities_Menu_Display())
					return;
				else
					break;
			case 3:
				if (Misc_Menu_Display())
					return;
				else
					break;
			case 4:
				FastTravel();
				return;
			case 5:
				Save();
				return;
			case 20:
				return;
		}
	}
}

int Misc_Menu_Display()
{
	while (true)
	{
		MSG( Misc );
		SEL_CHK_PAD(6,20);
		SEL_CHK_PAD(7,19);
		int select = SEL( Misc_Menu );
		
		switch (select)
		{
			case 0:
				SetYen();
				break;
			case 1:
				SetItem();
				break;
			case 2:
				MaxSocialStats();
				break;
			case 3:
				MaxPersonaStats();
				break;
			case 4:
				if (ChangeDate())
					return 1;
				else
					break;
			case 5:
				Add_Member();
				break;
			case 6:
				Remove_Member();
				break;
			case 7:
				Font_Test();
				break;
			case 8:
				Test();
				break;
			case 19:
				CLOSE_MSG_WIN();
				return 1;
			case 20:
				return 0;
		}
	}
	return 0;
}

void Test()
{
	PUTSTR("30");
	PUT(FUNCTION_0030());
	PUTSTR("45");
	PUT(FUNCTION_0045());
	PUTSTR("46");
	PUT(FUNCTION_0046());
	PUTSTR("47");
	PUT(FUNCTION_0047());
	PUTSTR("5a");
	PUT(FUNCTION_005A());
	PUTSTR("5b");
	PUT(FUNCTION_005B());
	PUTSTR("5c");
	PUT(FUNCTION_005C());
	PUTSTR("83");
	PUT(FUNCTION_0083());
}

void SetItem()
{
	MSG( Select_Item_Group );
	SEL_CHK_PAD(6,20);
	int select = SEL( Item_Group );
	if (select == 20)
		return;
	int group = select * 1000;
	int id = Get_Number(3, Select_Weapon + select);
	if (id == -1)
		return;
	SET_MSG_VAR( 0, group + id, 3 );
	SET_MSG_VAR( 1, GET_ITEM(1, group + id), 0);
	MSG(Confirm_Item);
	SEL_CHK_PAD( 6, 1 );
	select = SEL( YesNo );
	if (select == 1)
		return;
	int amount = Get_Number( 2, SetAmount );
	if (amount == -1)
		return;
	SET_ITEM(1, group + id, amount);
}

void MaxSocialStats()
{
	CHANGE_SOCIAL_STAT( 0, 999 );
	CHANGE_SOCIAL_STAT( 1, 999 );
	CHANGE_SOCIAL_STAT( 2, 999 );
}

void MaxPersonaStats()
{
	CHANGE_PERSONA_STAT( 0, 99 );
	CHANGE_PERSONA_STAT( 1, 99 );
	CHANGE_PERSONA_STAT( 2, 99 );
	CHANGE_PERSONA_STAT( 3, 99 );
	CHANGE_PERSONA_STAT( 4, 99 );
}

void Add_Member()
{
	int member = Get_Number(2, SelectID2);
	if (member == -1)
		return;
	ADD_MEMBER( 0, member ); //Adds member
}

void Remove_Member()
{
	int member = Get_Number(2, SelectID2);
	if (member == -1)
		return;
	REMOVE_MEMBER(member); //Removes member
}

int ChangeDate()
{
	int month = Get_Number(2, Month);
	if (month == -1)
		return 0;
	int day = Get_Number(2, Day);
	if (day == -1)
		return 0;
	int time = Get_Number(1, Time);
	if (time == -1)
		return 0;
	SET_DATE( month, day, time );
	FUNCTION_0186( 15 );
    FADE( 1, 0 );
    FADE_SYNC();
	NEXT_DAY();
	return 1;
}

void SetYen()
{
	int yen = Get_Number(7, SelectYen);
	if (yen == -1)
	{
		return;
	}
	int current = GET_YEN();
	if (yen < current)
		REMOVE_YEN(current - yen);
	else if (yen > current)
		GIVE_YEN(yen - current);
}

int Call_Menu_Display()
{
	while (true)
	{
		MSG( Call );
		SEL_CHK_PAD(6,20);
		SEL_CHK_PAD(7,19);
		int select = SEL( Call_Menu );
		
		switch (select)
		{
			case 0:
				if (EventSelect())
					return 1;
				else
					break;
			case 1:
				if (FieldSelect())
					return 1;
				else
					break;
			case 2:
				if (BattleSelect())
					return 1;
				else
					break;
			case 3:			
				BGMSelect();
				break;
			case 4:
				if (MovieSelect())
					return 1;
				else
					break;
			case 5:
				if (DungeonSelect())
					return 1;
				else
					break;
			case 19:
				CLOSE_MSG_WIN();
				return 1;
			case 20:
				return 0;
		}
	}
	return 0;
}

// Call functions
int BattleSelect()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	int major = Get_Number(3, SelectID3);
	if (major == -1)
	{
		return 0;
	}
	CLOSE_MSG_WIN();
	CALL_SFX( 3, 0 );
	FUNCTION_01C2();
	FUNCTION_01C3();
	CALL_BATTLE( major );
	FADE( 3, 0 );
	FADE_SYNC();
	FUNCTION_00A6();
	FUNCTION_01E7();
	FUNCTION_01A5();
	if (floor != 0) // return to current tartarus floor
		CALL_FLOOR( floor );
	else
		CALL_FIELD(field_major, field_minor, 0, 0);
	return 1;
}

// Call floor
int DungeonSelect()
{
	int major = Get_Number(3, SelectFloor);
	if (major == -1)
	{
		return 0;
	}
	CLOSE_MSG_WIN();
	FADE( 3, 0 );
	FADE_SYNC();
	CALL_FLOOR( major );
	return 1;
}

int MovieSelect()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	int major = Get_Number(2, SelectID2);
	if (major == -1)
	{
		return 0;
	}
	CLOSE_MSG_WIN();
	// silence
	CALL_BGM(999);
	CALL_MOVIE(major);
	NS_MOVIE_SYNC();
	FADE( 3, 0 );
	FADE_SYNC();
	if (floor != 0)
		CALL_FLOOR( floor );
	else
		CALL_FIELD( field_major, field_minor, 0, 0 );
	return 1;
}

int EventSelect()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	int major = Get_Number(3, SelectMajor);
	if (major == -1)
	{
		return 0;
	}
	int minor = Get_Number(3, SelectMinor);
	if (minor == -1)
	{
		return 0;
	}
	CLOSE_MSG_WIN();
	FADE( 3, 0 );
	FADE_SYNC();
	BIT_ON( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	CALL_EVENT( major, minor, 0);
	FADE( 3, 0 );
	FADE_SYNC();
	if (floor != 0)
		CALL_FLOOR( floor );
	else
		CALL_FIELD( field_major, field_minor, 0, 0 );
	return 1;
}

int FieldSelect()
{
	int major = Get_Number(3, SelectMajor);
	if (major == -1)
	{
		return 0;
	}
	int minor = Get_Number(3, SelectMinor);
	if (minor == -1)
	{
		return 0;
	}
	int pos = Get_Number(2, SelectPosition);
	FADE( 3, 0 );
	FADE_SYNC();
	BIT_ON( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	CALL_FIELD( major, minor, pos, 0 );
	return 1;
}

void BGMSelect()
{
	int major = Get_Number(3, SelectID3);
	if (major == -1)
		return;
	CALL_BGM(major);
}

int Flag_Menu_Display()
{
	while (true)
	{
		MSG( Flag );
		SEL_CHK_PAD(6,20);
		SEL_CHK_PAD(7,19);
		int select = SEL( Flag_Menu );
		
		switch (select)
		{
			case 0:
				EnableAllFlags();
				break;
			case 1:
				DisableAllFlags();
				break;
			case 2:
				PrintFlags();
				break;
			case 3:			
				ToggleBit();
				break;
			case 4:
				ToggleRange();
				break;
			case 19:
				CLOSE_MSG_WIN();
				return 1;
			case 20:
				return 0;
		}
	}
	return 0;
}

void PrintFlags()
{
	PUTSTR("=======Enabled Flags=======");
	int index = 0;
	while (index < 10000)
	{
		if (BIT_CHK(index))
			PUT(index);
		index = index + 1;
	}
}

void EnableAllFlags()
{
	int index = 0;
	while (index < 10000)
	{
		BIT_ON(index);
		index = index + 1;
	}
}

void DisableAllFlags()
{
	int index = 0;
	while (index < 10000)
	{
		BIT_OFF(index);
		index = index + 1;
	}
}

void ToggleBit()
{
	int major = Get_Number(4, SelectFlag);
	if (major == -1)
	{
		return;
	}
	int flag = BIT_CHK(major);
	int mask = 0;
	if (flag)
		mask = 1;
	else
		mask = 2;
	SET_MSG_VAR(0, major, 0);
	SET_MSG_VAR(1, flag, 0);
	MSG( CurrentFlag );
	SEL_CHK_PAD(6,3);
	SET_MASK(mask);
	int toggle = SEL(OnOff);
	if (toggle == 0)
	{
		BIT_ON(major);
	}
	else if (toggle == 1)
	{
		BIT_OFF(major);
	}
	else
	{
		return;
	}
	SET_MSG_VAR(0, major, 0);
	SET_MSG_VAR(1, BIT_CHK(major), 0);
    MSG( FlagConfirmation );
}

void ToggleRange()
{
	int lower = Get_Number(4, SelectLowerFlag);
	if (lower == -1)
	{
		return;
	}
	int upper = Get_Number(4, SelectUpperFlag);
	if (lower == -1)
	{
		return;
	}
	SEL_CHK_PAD(6,3);
	int toggle = SEL(OnOff);
	if (toggle < 2 )
	{
		while (lower <= upper)
		{
			if (toggle == 0)
				BIT_ON(lower);
			else
				BIT_OFF(lower);
			lower = lower + 1;
		}
	}
	return;
}

int Facilities_Menu_Display()
{
	MSG( Facilities );
	SEL_CHK_PAD(6,20);
	SEL_CHK_PAD(7,19);
	int select = SEL( Facilities_Menu );
	if (select < 5)
		CLOSE_MSG_WIN();
	switch (select)
	{
		case 0:
			VelvetRoom();
			return 1;
		case 1:
			Police();
			return 1;
		case 2:
			Pharmacy();
			return 1;
		case 3:
			Antique();
			return 1;
		case 4:
			Accessory();
			return 1;
		case 19:
			CLOSE_MSG_WIN();
			return 1;
		case 20:
			return 0;
	}
	return 0;
}

// Facility functions
void Accessory()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	CALL_SFX( 2, 8 );
	FLD_FUNCTION_0089( 10253, 0, 0, 0, 1 );
	FADE( 2, 0 );
	FADE_SYNC();
	BIT_ON( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	CALL_FCL( 1 );
	FUNCTION_002B();
	BIT_OFF( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	
	if (floor != 0) 
		CALL_FLOOR( floor );
	else
		CALL_FIELD( field_major, field_minor, 0, 0 ); 
}

void Police()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	CALL_SFX( 2, 8 );
    FLD_FUNCTION_0089( 10252, 0, 0, 0, 1 );
    FADE( 2, 0 );
    FADE_SYNC();
	BIT_ON( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
    CALL_FCL( 0 );
    FUNCTION_002B();
    BIT_OFF( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	if (floor != 0) // return to current tartarus floor
		CALL_FLOOR( floor );
	else
		CALL_FIELD( field_major, field_minor, 0, 0 );
}

void Antique()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	CALL_SFX( 2, 8 );
    FLD_FUNCTION_0089( 10250, 0, 0, 0, 1 );
    FADE( 2, 0 );
    FADE_SYNC();
    BIT_ON( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
    CALL_FCL( 4 );
    FUNCTION_002B();
    BIT_OFF( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	if (floor != 0) // return to current tartarus floor
		CALL_FLOOR( floor );
	else
		CALL_FIELD( field_major, field_minor, 0, 0 );
}

void Pharmacy()
{
	int floor = GET_FLOOR_ID();
	int field_major = GET_FIELD_MAJOR();
	int field_minor = GET_FIELD_MINOR();
	CALL_SFX( 2, 8 );
	FLD_FUNCTION_0089( 10249, 0, 0, 0, 1 );
	FADE( 2, 0 );
	FADE_SYNC();
	BIT_ON( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	CALL_FCL( 2 );
	FUNCTION_002B();
	BIT_OFF( 0 + 0x0400 + 0x0800 + 0x0400 + 0x0400 + 7 );
	if (floor != 0) // return to current tartarus floor
		CALL_FLOOR( floor );
	else
		CALL_FIELD( field_major, field_minor, 0, 0 );
}

void VelvetRoom()
{
	if (GET_FLOOR_ID() != 0)
	{
		BIT_ON(7000);
		SET_CNT(999, GET_FLOOR_ID());
	}
	else
	{
		BIT_ON(7001);
		SET_CNT(997, GET_FIELD_MAJOR());
		SET_CNT(998, GET_FIELD_MINOR());
	}
	CALL_SFX( 2, 0x20 );
	FLD_FUNCTION_0089( 10243, 1, 0, 0, 1 );
	FADE( 6, 30 );
	FADE_SYNC();
	CALL_FIELD( 8, 3, 0, 0 );
}

// Brings up fast travel map
void FastTravel()
{
	CLOSE_MSG_WIN();
	BIT_ON( 0 + 0x0400 + 0x0800 + 19 );
	FADE( 1, 0 );
	FADE_SYNC();
	CALL_MAP( 0 );
}

// Save wherever you can call mod menu
// Seems to not save exact floor in tartarus but the first floor of the block
void Save()
{
	CLOSE_MSG_WIN();
	FADE( 5, 10 );
	FADE_SYNC();
	FUNCTION_018F();
	FUNCTION_0190();
	FUNCTION_000D( 0 );
	FADE_SYNC();
}

// Used for getting id's for calling functions
int Get_Number(int digitNum, int helpText)
{
	tryagain:
	MSG( helpText );
	int digit = 0;
	int n = 0;
	_OpenNumMenu:
	while (n < digitNum)
	{
		SEL_CHK_PAD(6, 20);
		int select = SEL( Num_Menu );
		if (select == 20)
			return -1;
		digit *= 10;
		digit += select;
		n += 1;
	}
	
	// Confirmation
	SET_MSG_VAR(0, digit, 0);
    MSG( Confirmation );
	SEL_CHK_PAD(6,1);
	if (SEL(YesNo) == 1)
		goto tryagain;
	
	return(digit);
}

void Font_Test()
{
	MSG( FontTest );
}